임의의 정수 10개 추출하고
내림차순으로 정렬하고,
화면에 표시
오름차순으로 정렬
맨 마지막에 있는 정수 1개 삭제
중간에 위치한 수를 추출하여 화면에 표시
중간에 수가 없다면 중간 양쪽에 있는 수의 평균값

avg = (3+5) / 2

 : 이 있다면 블럭이다.  java의 { 와 같다

들여쓰기 한다면 for루프의 종속된다. 

블럭의 끝은 없다. 하지만,

for루프 위치에 있다면 동등관계가 된다. 

range() = 함수, 리턴값은 레인지 오브젝트가 남는다. 레인지라는 오브젝트를 만드는 함수.

컬렉션 처럼 for루프를 사용할수 잇다

list() 함수는 list를 만들어내는 함수.
ex ) numbers = list(range(1,6)) 여기서 6은 stop이라한다. stop은 원소로 포함되지 않는다.
	print(numbers) 이렇게한다면
1부터 5까지의 list를 만들어서 numbers 넣은 후 
출력한다.

range(2,11,2) 여기서 앞의 2는 start 11은 stop 뒤의 2는 stap이라 하며,
스타트를 정수 2로 시작하고, 2씩 건너뛴다.

ex ) 2, 4, 6, 8, 10

위의 숫자로 본다면.
min() = 2
max() = 10
sum() = 30
----------------------------------------------------------------------------------------------------------------------------

* 중요 list comprehension

# value가 1부터 10까지 루프를 돌면서 for루프 왼쪽에도 쓰인다.
# 대괄호가 있어야 list comprehension이라 할 수 있다.
squares = [value**2 for value in range(1,11)] 왼쪽에서는 for루프 돌면서 나온 값의 제곱을 하며, list에 저장
print(squares) 

결과 = [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]


# 1~10 사이의 정수 중에서 짝수만 선택하여 리스트의 원소에 저장하고 
   홀수는 0으로 변경하여 저장한 후, 리스트의 모든 원소를 화면에 표시해보세요.


Slicing a List 리스트에 일부분만 가져오는 법.
ex)
players = ['charles', 'martina', 'michael', 'florence',......]
print(players[0:3]) :기준 왼쪽 시작 오른쪽 끝 0부터 3까지 3은 stop이어서 포함 x. 0,1,2를 가져와라 
결과 = ['charles', 'martina', 'michael']

print(players[:3]) :기준 왼쪽 시작이 없다면 처음부터라는 가져오라는 뜻. 따라서 처음부터 3까지 3은 빼고 0,1,2
반대로
print(players[2:]) :기준 오른쪽 끝이 없다면 시작점부터 끝까지 가져오라는 뜻. 따라서 2부터 끝까지 2,3,4,....

print(players[-2:]) :기준 왼쪽이 -라한다면 뒤에서 2번째 부터 끝까지 가져오라는 뜻.

print(players[:]) : 기준 왼쪽 오른쪽이 없다면 다 가져오라는 뜻.

----------------------------------------------------------------------------------------------------------------------------

# 객체의 주소를 복사하는 것을 Shallow Copy(얕은 복사)라한다.  뿌리까지 복사X
# 그 주소가 가리키는 곳의 데이터를 복사하는 것을 Deep Copy(깊은복사)라한다.

----------------------------------------------------------------------------------------------------------------------------

list속성과 동일하지만 값을 변경하지 않을 때에는 튜플을 사용한다.
따라서 업데이트 삭제가 되지 않는다.
list와 다르게 []게 아닌  ()를 사용한다.
Python에선 실행 우선순위와 튜플과 구별하기위해서 원소가 한개여도 ,를 꼭 붙여준다.
ex) i = (200, 50)
     i = (200,)

----------------------------------------------------------------------------------------------------------------------------
무작위  정수 10개를 준비하고 처음 3개를 추출하여 튜플에 저장하고 화면에 표시
list comprehension 활용


----------------------------------------------------------------------------------------------------------------------------

Python if else사용법

if car == 'bmw':
       print(car)
else:
       print('boom')

소문자와 비교하고 싶다면
lower() 함수를 이용

car = 'Audi'
car.lower() == 'audi'
True이다.
예를들어 DB에는 소문자로 저장 되어있는데
 회원이 대문자로 입력하였더라도 비교 가능 하다.

----------------------------------------------------------------------------------------------------------------------------

Python if elif else사용법
else가 없다면 한번도 실행되지 않을 수 있다. 주의해야함.

age = 12

if age < 4:
   price 0
elif age < 18:
    price = 25
elif age < 65:
   price 40
else:
   price = 20


----------------------------------------------------------------------------------------------------------------------------

키보드에서 아이디, 암호를 입력 받아서
로그인 하는 기능 구현
미리 uid, pwd 리스트를 생성해 놓고 몇개의 정보를 준비함
uid, pwd에는 아이디는 모두 대문자로 준비함
로그인에 성공할 때 까지 반복해서 (3번까지) 시도할 수 있도록 함
결국 로그인에 성공하면 '로그인 성공', 
아니면 '로그인 실패' 표시

----------------------------------------------------------------------------------------------------------------------------

Python의 논리연산자는 and, or, not으로 사용한다.

----------------------------------------------------------------------------------------------------------------------------

boolean표현식으로
list 안에 값이 있는지 확인하는 것은
in 을 사용한다.

list = ['1','2','3','4']

ex) 
'1' in list
결과 값 = true

'5' in list
결과 값 = false

'2' in ['1','2','3']
결과 값 = True

----------------------------------------------------------------------------------------------------------------------------

리스트안에 원소가 있으면이라는 조건을 줄때
자바에서는 if(list!=null){} 이렇게 했다면
python에서는 아래와같이 사용한다.

ex) 
if list:
   print('리스트 있음')
else list:
   print('리스트 없음')

----------------------------------------------------------------------------------------------------------------------------

try ~ except 리스트에 포함되지 않은 아이템을 검사
 - list.index('value')

----------------------------------------------------------------------------------------------------------------------------

dictionary
Python에선 json이 dictionary이다.
key를 이용하여 value를 구한다.

alien_0 = {'color' : 'green'}

print(alien_0['color'])
결과 값은 = green

alien_0 = {'color' : 'green', 'points' : 5}

alien_0 = {}
빈 딕셔너리 만들기
만약 비어있다면,
alien_0['color'] = 'yellow' 추가
만약 있다면,
alien_0['color'] = 'blue' 수정
newalien = alien_0['color'] 불러오기
del alien_0['color'] 삭제

딕셔너리의 get메소드를 사용하여 에러를 방지한다.
딕셔너리에 key가 points인 값이 있다면 그대로 출력
딕셔너리에 key가 points인 값이 없다면 'No Point value assigned.'가 출력 되게
point_value = alien_0.get('points', 'No Point value assigned.')
print(point_value)

# dictionary 
users = [{}, {}, {}]
# type(users[0]['key'])

키보드에서 3인의 회원정보(번호,이름,전화)를 입력받는다.
입력을 마치면, 입력된 모든 정보를 리스트로 화면에 표시
딕셔너리 생성 후 num이라는 key값에 value값 넣기
user = {}
user['num'] = 11

딕셔너리는 순서를 지키지 않는다.
루프를 돌린다면, 지정을 한다면 순서대로 나오지만,
ex)
num, name, phone 처럼 지정하면 지정 순서대로 나온다.
user['num']}\t{user['name']}\t{user.get('phone', '전화기 분실')
지정하지 않는다면 순서대로 나오지 않는다.

딕셔너리 루프돌리는 법
for key, value in user_0.items():
	print(f"\nkey: {key}")
	print(f"\nvalue: {value}")

모든key만 가져오는 법
keys메소드를 사용한다. keys메소드도 리스트이다.
for name in favorite_languages.keys():
	print(name.title())

keys메소드를 사용하여key를 구하고 value값을 구하여 조건문 사용하기
	if name in friends:
		language = favorite_languages[name].title() value값 사용
		print(f"\nlanguage")

모든value만 가져오는 법
for language in favorite_languages.values():
	print(language.title())

모든value만 가져오는 법 set을 사용한다면,
리스트는 중복을 허용하기때문에 set을 사용하면 list안에 있는 중복된 값을 빼준다.
for language in set(favorite_languages.values()):
	print(language.title())

리스트에 저장된 마지막 회원정보 중에서 phone 정보 삭제
삭제된 상태로 리스트 출력
phone 정보가 없는 경우 '전화기 분실' 표시

자료구조
[{}, {}, ......] 리스트안에 딕셔너리(Map)
위의 리스트에 몇 사람 정보를 저장한다.
키보드에서 회원번호를 입력하여 해당 회원을 검색하고,
그 결과를 화면에 표시한다.

# list, set, dictionary
# list : 저장순서 유지, 중복가능 각 방이 있다.
# set : 저장순서 없음, 중복불가 각 방이 없다.
# dict : key, value 쌍으로 저장

1~10 사이의 정수 중에서 임의로 한개를 추출하여
중복되지 않도록 7개를 추출하려고 한다.
무한루프
while True:
무한루프 벗어나기는 break